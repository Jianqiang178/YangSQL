/* Generated By:JJTree: Do not edit this line. ASTLikeExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.yjq.parser.jjt;

import com.yjq.parser.interfaces.Expression;
import lombok.Data;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Data
public class ASTLikeExpression extends SimpleNode implements Expression {
    private ASTColumnName columnName = null;
    private ASTStringLiteral stringLiteral = null;
    private boolean not = false;

    public ASTLikeExpression(int id) {
        super(id);
    }

    public ASTLikeExpression(SQLParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(SQLParserVisitor visitor, Object data) {

        return visitor.visit(this, data);
    }

    @Override
    public boolean result() {
        boolean res = true;
        if (columnName.getData() == null) {
            return false;
        }
        String value = stringLiteral.getValue();
        value = value.replaceAll("\\*", "\\*").replaceAll("\\.", "\\.");
        value = value.replaceAll("%", ".*").replaceAll("_", ".");
        Pattern p = Pattern.compile(value);
        Matcher m = p.matcher(columnName.getData().getValue());
        res = m.matches();
        if (not) {
            return !res;
        } else {
            return res;
        }
    }
}
/* JavaCC - OriginalChecksum=8bd446c1d272bb5e370484d978697304 (do not edit this line) */
