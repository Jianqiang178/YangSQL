options {
    STATIC = false ;
    MULTI = true ;
    VISITOR = true;
    UNICODE_PARSER = true;
}
PARSER_BEGIN(SQLParser)
package com.yjq.parser.jjt;

import com.sun.org.apache.bcel.internal.generic.ARETURN;
import com.yjq.parser.exceptions.YangSQLException;
import com.yjq.parser.jjt.*;
import com.yjq.parser.operator.*;
import com.yjq.parser.server.*;
import java.util.Arrays;
public class SQLParser{
    public static void main(String args[]) {
        CreateAndInsert.initDb();
        System.out.println("Reading from standard input...");
        while (true){
            try{
                SQLParser p = new SQLParser(System.in);
                System.out.print("YangSQL > ");
                SimpleNode n = p.Start();
                n.getStatement().exec();
//                    n.dump("");
//                    System.out.println("");
            }catch (ParseException e){
                System.out.println("Error: " + "have an error in SQL syntax near '" + e.currentToken +"'");
            }catch (YangSQLException e){
                System.out.println("Error: " + e.getMessage());
            }catch (Exception e){
                System.out.println(e.getMessage());
//                    e.printStackTrace();
            }
        }
    }}
PARSER_END(SQLParser)/*定义词法分析*/
SKIP:{" "}
SKIP : {"\t"}
SKIP:{"\n"|"\r"|"\r\n"}TOKEN:/*定义关键字*/
{ <CREATE:"create">
    | <TABLE:"table">
    | <DROP:"drop">
    | <DELETE:"delete">
    | <UPDATE:"update">
    | <SELECT:"select">
    | <INSERT:"insert">
    | <WHERE:"where">
    | <SET:"set">
    | <FROM:"from">
    | <INTO:"into">
    | <DISTINCT:"distinct">
    | <ALL:"all">
    | <LIKE:"like">
    | <ORDER:"order">
    | <BY:"by">
    | <AS:"as">
    | <VALUES:"values">
    | <AND:"and">
    | <IN:"in">
    | <INT:"int">
    | <CHAR:"char">
    | <DATE:"date">
    | <DOUBLE:"double">
    | <IS:"is">
    | <NOT:"not">
    | <ISNULL:"isnull">
    | <NOTNULL:"NOTNULL">
    | <NULL:"null">
    | <OR:"or">
    | <BETWEEN:"between">
    | <GROUP:"group">
    | <HAVING:"having">
    | <LIMIT:"limit">
    | <OFFSET:"offset">
    | <ASC:"asc">
    | <DESC:"desc">
    | <LAST:"last">
    | <FIRST:"first">
    | <NULLS:"nulls">
    | <EXISTS:"exists">
    | <REFERENCES:"references">
    | <FOREIGN:"foreign">
    | <PRIMARY:"primary">
    | <KEY:"key">
    | <UNIQUE:"unique">
}
TOKEN:/*定义符号*/
{
    <UNDERSCORE:"_">
    | <COMMA:",">
    | <SEMICOLON:";">
    | <COLON:":">
    | <LEFTPARENTHESES:"(">
    | <RIGHTPARENTHESES:")">
    | <EQUAL:"=">
    | <PLUS:"+">
    | <MINUS:"-">
    | <TIMES:"*">
    | <DIVIDE:"/">
    | <DOT:".">
    | <GREATERTHAN:">">
    | <GREATERTHANOREQUALTO:">=">
    | <LESSTHAN:"<">
    | <LESSTHANOREQUALTO:"<=">
    | <LEFTQUOTATION:"\"">
    | <NOTEUQAL:"!=">
    | <NOTEQUAL:"<>">
    | <NOTGREATER:"!>">
    | <NOTLESS:"!<">
    | <LQUOTATION:"'">
}
TOKEN:/* 定义整数 */
{
    <INTEGER_LITERAL:["0"]|(["1"-"9"](<DIGIT>)*)> |
    <FLOAT_LITERAL: ["1"-"9"](["0"-"9"])* "." (["0"-"9"])* >
}
TOKEN:
{
    <SYMBOL:["_", "%"]>
}
TOKEN:/*定义数字*/
{
    <#DIGIT:["0"-"9"]>
}
TOKEN:/* 定义标识符 */
{
    <IDENTIFIER:<LETTER>
    |<LETTER><DIGIT>
    | <LETTER>(<LETTER>| <DIGIT> | <UNDERSCORE>)*(<LETTER>| <DIGIT>)+>
    | <#LETTER:["a"-"z", "A"-"Z"]| <SYMBOL> >
}/* 语法解析*/
TOKEN : {
    <#CHARC: <LETTER> | <DIGIT> | ["\u4e00"-"\u9fa5"]>|
    <STRING: (<CHARC>)+>
}
ASTTableName TableName():{Token t; Token y;}
{
    t = <IDENTIFIER>{jjtThis.setName(t.image);return jjtThis;}
    | LOOKAHEAD(2)t = <IDENTIFIER>{jjtThis.setDbName(t.image);jjtThis.setHavaDb(true);} <DOT> y = <IDENTIFIER>{jjtThis.setName(y.image);return jjtThis;}
}
ASTColumnName ColumnName():{Token t;Token y;}
{
    t = <IDENTIFIER>{jjtThis.setName(t.image);} [<DOT> y = <IDENTIFIER>{jjtThis.setName(y.image);jjtThis.setTableName(t.image);jjtThis.setHaveTable(true);}]{return jjtThis;}
}
void Function():{}
{
    <IDENTIFIER><LEFTPARENTHESES>Value()[(<COMMA> Value())+]<RIGHTPARENTHESES>
}
ASTStringLiteral StringLiteral():{Token t;}
{
    <LQUOTATION>(t = <STRING> | t = <IDENTIFIER>) {jjtThis.setValue(t.image);}<LQUOTATION>{return jjtThis;}
}
ASTNumericLiteral NumericLiteral():{Token t;}
{
    t = <INTEGER_LITERAL> {jjtThis.setIntegerValue(Integer.parseInt(t.image));return jjtThis;}
    | t = <FLOAT_LITERAL>{jjtThis.setDoubleValue(Double.parseDouble(t.image));return jjtThis;}
}
void LiteralValue():{}
{
    NumericLiteral()
}
SimpleNode Start() : {ASTStatement statement;}
{
    statement = Statement(){jjtThis.setStatement(statement);} ";"
    { return jjtThis; }
}
ASTStatement Statement() : {ASTSelectStmt selectStmt; ASTCreateStmt createStmt; ASTInsertStmt insertStmt; ASTUpdateStmt updateStmt; ASTDeleteStmt deleteStmt;}
{
    selectStmt = SelectStmt(){jjtThis.setType(1);jjtThis.setAstSelectStmt(selectStmt);return jjtThis;}
    |createStmt = CreateStmt(){jjtThis.setType(2);jjtThis.setCreateStmt(createStmt);return jjtThis;}
    |DropT(){return jjtThis;}
    |deleteStmt = DeleteStmt(){jjtThis.setType(4);jjtThis.setDeleteStmt(deleteStmt);return jjtThis;}
    |insertStmt = InsertStmt(){jjtThis.setType(5);jjtThis.setInsertStmt(insertStmt);return jjtThis;}
    |updateStmt = UpdateStmt(){jjtThis.setType(6); jjtThis.setUpdateStmt(updateStmt);return jjtThis;}
}
/**
* 查询语句
*/
ASTSelectStmt SelectStmt():
{
    ASTResult astResult;
    ASTFromList astFromList;
    ASTExpression expression;
    ASTOrderBy orderBy;
    ASTLimit limit;
}
{
    <SELECT>[<DISTINCT>]astResult = Result(){jjtThis.setAstResult(astResult);}<FROM>astFromList = FromList(){jjtThis.setAstFromList(astFromList);}
    [<WHERE> expression = Expression(){jjtThis.setExpression(expression);}| LOOKAHEAD(2)Exist()]
    [GroupBy()] /* Group by having子句 */
    [orderBy = OrderBy(){jjtThis.setOrderBy(orderBy);}] /* Order子句 */
    [limit = Limit(){jjtThis.setLimit(limit);}] /* Limit子句 */
    {return jjtThis;}
}
void ArithmeticOperator():{}
{
    <DIVIDE>
    | <PLUS>
    | <MINUS>
    | <TIMES>
}
void LogicalOperator():{}
{
    <OR>
    | <AND>
}
void ComparisonOperator():{}
{
    <EQUAL>
    | <LESSTHAN>
    | <LESSTHANOREQUALTO>
    | <GREATERTHAN>
    | <GREATERTHANOREQUALTO>
}
/**
* 逻辑-and表达式
*/
ASTAndExpression AndExpression():{ASTCondition condition;}
{
    [<NOT>{jjtThis.setLeftNot(true);}] condition = Condition(){jjtThis.setLeft(condition);}
    [<AND>{jjtThis.setAnd(true);}[<NOT>{jjtThis.setRightNot(true);}] condition = Condition(){jjtThis.setRight(condition);}]{return jjtThis;}
}
/**
* 逻辑-or表达式
*/
ASTOrExpression OrExpression():{ASTAndExpression astAndExpression;}
{
    astAndExpression = AndExpression(){jjtThis.setLeft(astAndExpression);}
    [<OR>{jjtThis.setOr(true);} astAndExpression = AndExpression(){jjtThis.setRight(astAndExpression);}]{return jjtThis;}
}
/**
* 空值表达式
*/
ASTNullExpression NullExpression():{ASTColumnName columnName;}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);}
    (<ISNULL>{jjtThis.setNull(true);return jjtThis;}
    | (<IS>{jjtThis.setIs(true);} [<NOT>{jjtThis.setNot(true);}] <NULL>{jjtThis.setNulls(true);return jjtThis;}))
}
/**
* like匹配表达式
*/
ASTLikeExpression LikeExpression():{ASTColumnName columnName;ASTStringLiteral stringLiteral;}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);}
    [<NOT>{jjtThis.setNot(true);}] <LIKE> stringLiteral = StringLiteral(){jjtThis.setStringLiteral(stringLiteral);return jjtThis;}
}
/**
* in判断表达式
*/
ASTInExpression InExpression():{ASTColumnName columnName; ASTData data;}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);}
    [<NOT>{jjtThis.setNot(true);}] <IN> <LEFTPARENTHESES> data = Data(){jjtThis.getData().add(data);} [(<COMMA> data = Data(){jjtThis.getData().add(data);})+]<RIGHTPARENTHESES>{return jjtThis;}
}
/**
* between表达式
*/
ASTBetweenExpression BetweenExpression():{ASTColumnName columnName; ASTData data;}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);}
    [<NOT>{jjtThis.setNot(true);}] <BETWEEN> data = Data(){jjtThis.setFirst(data);} <AND> data = Data(){jjtThis.setSecond(data);}
    {return jjtThis;}
}
/**
* 比较表达式
*/
ASTComparisonExpression ComparisonExpression():
{
    ASTColumnName columnName;
    ASTValue value;
}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);}
    (<EQUAL>{jjtThis.setOperator(new Equal());}
    | <LESSTHAN>{jjtThis.setOperator(new LessThan());}
    | <LESSTHANOREQUALTO>{jjtThis.setOperator(new LessThanOrEqualTo());}
    | <GREATERTHAN>{jjtThis.setOperator(new GreaterThan());}
    | <GREATERTHANOREQUALTO>{jjtThis.setOperator(new GreaterThanOrEqualTo());}
    | <NOTEQUAL>{jjtThis.setOperator(new NotEqual());}
    | <NOTGREATER>{jjtThis.setOperator(new LessThanOrEqualTo());}
    | <NOTLESS>{jjtThis.setOperator(new GreaterThanOrEqualTo());})
    value = Value(){jjtThis.setValue(value);return jjtThis;}
}
ASTData Data():{ASTNumericLiteral numericLiteral;ASTStringLiteral stringLiteral;}
{
    numericLiteral = NumericLiteral(){jjtThis.setNumericLiteral(numericLiteral); return jjtThis;}
    | stringLiteral = StringLiteral(){jjtThis.setStringLiteral(stringLiteral); return jjtThis;}
}
ASTValue Value():
{
    ASTData data;
    ASTColumnName columnName;
}
{
    data = Data(){jjtThis.setData(data);return jjtThis;}
    | columnName = ColumnName(){jjtThis.setColumnName(columnName);return jjtThis;}
}
ASTExpression Expression():{ASTOrExpression expression;}
{
    expression = OrExpression(){jjtThis.setOrExpression(expression);return jjtThis;}
}
/**
* where条件
*/
ASTCondition Condition():
{
    ASTComparisonExpression comparisonExpression;
    ASTInExpression inExpression;
    ASTBetweenExpression betweenExpression;
    ASTLikeExpression likeExpression;
    ASTNullExpression nullExpression;
}
{
    LOOKAHEAD(2)comparisonExpression = ComparisonExpression(){jjtThis.setExpression(comparisonExpression);return jjtThis;}
    | LOOKAHEAD(2)inExpression = InExpression(){jjtThis.setExpression(inExpression);return jjtThis;}
    | LOOKAHEAD(2)betweenExpression = BetweenExpression(){jjtThis.setExpression(betweenExpression);return jjtThis;}
    | LOOKAHEAD(2)likeExpression = LikeExpression(){jjtThis.setExpression(likeExpression);return jjtThis;}
    | LOOKAHEAD(2)nullExpression = NullExpression(){jjtThis.setExpression(nullExpression);return jjtThis;}
}
/**
* ORDER BY子句
*/
ASTOrderBy OrderBy():{ASTColumnName columnName;}
{
    <ORDER> <BY> columnName = ColumnName(){jjtThis.getColumnNames().add(columnName);}
    [(<COMMA> columnName = ColumnName(){jjtThis.getColumnNames().add(columnName);})+]
    [<ASC>{jjtThis.setAsc(true);} |<DESC>{jjtThis.setAsc(false);}]
    [<NULL>{jjtThis.setNulls(true);} (<FIRST>{jjtThis.setNullFirst(true);} |<LAST>{jjtThis.setNullLast(true);})]
    {return jjtThis;}
}
/**
* GROUP BY 子句
*/
void GroupBy():{}
{
    <GROUP> <BY> ColumnName() [(<COMMA>ColumnName() )+] [<HAVING> Expression() ]
}
/**
* LIMIT子句
*/
ASTLimit Limit():{Token t;}
{
    <LIMIT> t = <INTEGER_LITERAL>{jjtThis.setLimit(Integer.parseInt(t.image));}
    [(<OFFSET> t = <INTEGER_LITERAL>){jjtThis.setOffset(Integer.parseInt(t.image));} | <COMMA> t = <INTEGER_LITERAL>{jjtThis.setOffset(Integer.parseInt(t.image));}]
    {return jjtThis;}
}
/**
* Exist
*/
void Exist():{}
{
    [<NOT>] <EXISTS> <LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>
}
void Operator():{}
{
    ArithmeticOperator() | LogicalOperator() | ComparisonOperator()
}
ASTResult Result():
{
    ASTResultColumn astResultColumn;
}
{
    <TIMES>{jjtThis.setAll(true);return jjtThis;}
    | (astResultColumn = ResultColumn(){jjtThis.getResultColumns().add(astResultColumn);}[(<COMMA>astResultColumn = ResultColumn(){jjtThis.getResultColumns().add(astResultColumn);})+]{return jjtThis;})
}
ASTResultColumn ResultColumn():
{
    ASTTableName tableName;
    ASTColumnName columnName;
    ASTFunction function;
    Token t;
}
{
    LOOKAHEAD(4)tableName = TableName()<DOT><TIMES>{jjtThis.setTableName(tableName);jjtThis.setType(1);return jjtThis;}
    | LOOKAHEAD(4)columnName = ColumnName(){jjtThis.setColumnName(columnName);jjtThis.setType(2); }[<AS> t = <IDENTIFIER>{jjtThis.setHaveAlias(Boolean.TRUE);jjtThis.setAlias(t.image);}]{return jjtThis;}
    | LOOKAHEAD(2)Function(){jjtThis.setType(3);return jjtThis;}
}
//void Expr():{}
//{
//    LOOKAHEAD(2)ColumnName() Exprr()
//    | LOOKAHEAD(2)LiteralValue() Exprr()
//    | LOOKAHEAD(2)TableName()<DOT>ColumnName() Exprr()
//    | LOOKAHEAD(2)Function()
//    | LOOKAHEAD(2)<LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES> Exprr()
//}
//void Exprr():{}
//{
//    [Operator() Expr() Exprr()
//    | LOOKAHEAD(2)[<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN语句*/Exprr()
//    | LOOKAHEAD(2)[<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */Exprr()
//    | LOOKAHEAD(2)(<NOTNULL> | <ISNULL> | <NOT> <NULL> )Exprr()
//    | LOOKAHEAD(2)[<NOT>] <LIKE> Expr() /* LIKE语句 */Exprr()]
//}
//void Exprrtemp():{}
//{
//    ColumnName()
//    | LiteralValue()
//    | TableName()<DOT>ColumnName()
//    | FunctionName()<LEFTPARENTHESES> [Expr()[(<COMMA>Expr())+]] |[<COMMA>] <RIGHTPARENTHESES>
//    | Expr() Operator() Expr()
//    | <LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES>
//    | Expr() [<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN语句*/
//    | Expr() [<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */
//    | Expr() (<NOTNULL> | <ISNULL> | <NOT> <NULL> )
//    | Expr() [<NOT>] <LIKE> Expr() /* LIKE语句 */
//}
ASTFromList FromList():{ASTFromTable fromTable;}
{
    fromTable = FromTable(){jjtThis.getFromTables().add(fromTable);}[(<COMMA>fromTable = FromTable(){jjtThis.getFromTables().add(fromTable);})+]{return jjtThis;}
}
ASTFromTable FromTable():{ASTTableName tableName;Token t;}
{
    tableName = TableName(){jjtThis.setTableName(tableName);} [[<AS>] t = <IDENTIFIER>{jjtThis.setHavaAlias(true);jjtThis.setAlias(t.image);}]{return jjtThis;}
    /* TODO:连接查询和嵌套查询 */
    | LOOKAHEAD(2)<LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>{return jjtThis;}
}
//void Condition():{}
//{
//    /*[Condition()<AND>Condition()]|*/
//    /*[Tuple()<IN>Query()]*/
//    Expr()
//    | Expr() <IS> <NULL>
//    | Expr() <NOTNULL>
//    | Expr() <ISNULL>
//}
void Tuple():{}
{
    Attribute()
}
/*--------- Create 语句 ----------*/
ASTCreateStmt CreateStmt():{Token t;ASTColList colList;}
{
    <CREATE><TABLE>t = <IDENTIFIER>{jjtThis.setTableName(t.image);} <LEFTPARENTHESES>colList = ColList(){jjtThis.setColList(colList);}<RIGHTPARENTHESES>
    {return jjtThis;}
}
ASTColList ColList():{ASTField field;int i = 0;}
{
    field = Field(){field.setIndex(i);i++;jjtThis.getFields().add(field);}
    [(<COMMA>field = Field(){field.setIndex(i);i++;jjtThis.getFields().add(field);})+]{return jjtThis;}
}
ASTField Field():{Token t; ASTConstraints constraints;}
{
    t = <IDENTIFIER>{jjtThis.setName(t.image);}
    (t = <INT>| t = <DATE>| t = <DOUBLE> | t = <CHAR><LEFTPARENTHESES><INTEGER_LITERAL><RIGHTPARENTHESES>)
    [constraints = Constraints(){jjtThis.setConstraints(constraints);}]
    {jjtThis.setDataType(t.image);return jjtThis;}
}
ASTConstraints Constraints():{ASTConstraint constraint;}
{
    constraint = Constraint(){jjtThis.getConstraintList().add(constraint);} [(constraint = Constraint(){jjtThis.getConstraintList().add(constraint);})+]{return jjtThis;}
}
ASTConstraint Constraint():{ASTTableName tableName; ASTColumnName columnName;}
{
    (<NOT> <NULL>{jjtThis.setType(1);return jjtThis;})
    |(<PRIMARY> <KEY>{jjtThis.setType(2);return jjtThis;})
    |(<FOREIGN> <KEY> <REFERENCES> tableName = TableName(){jjtThis.setTableName(tableName);} <LEFTPARENTHESES> columnName = ColumnName(){jjtThis.setColumnName(columnName);} <RIGHTPARENTHESES>{jjtThis.setType(3);return jjtThis;})
    | <UNIQUE>{jjtThis.setType(4);}
    {return jjtThis;}
}
/*--------- DELETE & DROP 语句 ----------*/
void DropT():{}
{
    <DROP><TABLE>Relation()
}
ASTDeleteStmt DeleteStmt():{ASTTableName tableName; ASTExpression expression;}
{
    <DELETE><FROM>tableName = TableName(){jjtThis.setTableName(tableName);}<WHERE>expression = Expression(){jjtThis.setExpression(expression);return jjtThis;}
}
/*-------- UPDATE 语句 -----------*/
ASTUpdateStmt UpdateStmt():{ASTTableName tableName;ASTSetList setList; ASTExpression expression;}
{
    <UPDATE> tableName = TableName(){jjtThis.setTableName(tableName);}
    <SET> setList = SetList(){jjtThis.setSetList(setList);}
    <WHERE> expression = Expression(){jjtThis.setExpression(expression);return jjtThis;}
}
ASTSetList SetList():{ASTUpdateValue updateValue;}
{
    updateValue = UpdateValue(){jjtThis.getUpdateValues().add(updateValue);} [(<COMMA> updateValue = UpdateValue(){jjtThis.getUpdateValues().add(updateValue);})+]{return jjtThis;}
}
ASTUpdateValue UpdateValue():{ASTColumnName columnName;ASTData data;}
{
    columnName = ColumnName(){jjtThis.setColumnName(columnName);} <EQUAL> data = Data(){jjtThis.setData(data); return jjtThis;}
}
/*-------- INSERT 语句 -----------*/
ASTInsertStmt InsertStmt():{ASTTableName tableName; ASTColumnList columnList; ASTDataList dataList;}
{
    <INSERT><INTO>tableName = TableName(){jjtThis.setTableName(tableName);}[<LEFTPARENTHESES>columnList = ColumnList(){jjtThis.setColumnList(columnList);}<RIGHTPARENTHESES>]
    <VALUES><LEFTPARENTHESES>dataList = DataList(){jjtThis.setDataList(dataList);}<RIGHTPARENTHESES>{return jjtThis;}
}
ASTColumnList ColumnList():{ASTColumnName columnName;}
{
    columnName = ColumnName(){jjtThis.getColumnNames().add(columnName);}[(<COMMA> columnName = ColumnName(){jjtThis.getColumnNames().add(columnName);})+]
    {return jjtThis;}
}
ASTDataList DataList():{ASTData data;}
{
    data = Data(){jjtThis.getDataList().add(data);} [(<COMMA> data = Data(){jjtThis.getDataList().add(data);})+]
    {return jjtThis;}
}
/*-------------------*/
void Attribute():{}
{
    IDENTIFIER()
}
void Relation():{}
{
    IDENTIFIER()
}
void Pattern():{}
{
    <LQUOTATION>IDENTIFIER()<LQUOTATION>
}
/*-------------------*/
void IDENTIFIER():{}
{
    <IDENTIFIER>
}