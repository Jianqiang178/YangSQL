/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLParser.jj */
/*@egen*/options {
    STATIC = false ;
                  
                   
}
PARSER_BEGIN(SQLParser)
package com.yjq.parser.jjt;

import com.sun.org.apache.bcel.internal.generic.ARETURN;import com.yjq.parser.jjt.*;
public class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSQLParserState jjtree = new JJTSQLParserState();

/*@egen*/
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        SQLParser p = new SQLParser(System.in);
        try {
          SimpleNode n = p.Start();
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
    }}
PARSER_END(SQLParser)/*\u7039\u6c2b\u7b9f\u7487\u5d86\u7876\u9352\u55d8\u703d*/
SKIP:{" "}
SKIP:{"\n"|"\r"|"\r\n"}TOKEN:/*\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd*/
{ <CREATE:"create">
    | <TABLE:"table">
    | <DROP:"drop">
    | <DELETE:"delete">
    | <SELECT:"select">
    | <INSERT:"insert">
    | <WHERE:"where">
    | <FROM:"from">
    | <INTO:"into">
    | <DISTINCT:"distinct">
    | <ALL:"all">
    | <LIKE:"like">
    | <ORDER:"order">
    | <BY:"by">
    | <AS:"as">
    | <VALUES:"values">
    | <AND:"and">
    | <IN:"in">
    | <INT:"int">
    | <CHAR:"char">
    | <DATE:"date">
    | <IS:"is">
    | <NOT:"not">
    | <ISNULL:"ISNULL">
    | <NOTNULL:"NOTNULL">
    | <NULL:"null">
    | <OR:"or">
    | <BETWEEN:"between">
    | <GROUP:"group">
    | <HAVING:"having">
    | <LIMIT:"limit">
    | <OFFSET:"offset">
    | <ASC:"asc">
    | <DESC:"desc">
    | <LAST:"last">
    | <FIRST:"first">
    | <NULLS:"nulls">
    | <EXISTS:"exists">
}
TOKEN:/*\u7039\u6c2b\u7b9f\u7ed7\ufe40\u5f7f*/
{
    <UNDERSCORE:"_">
    | <COMMA:",">
    | <SEMICOLON:";">
    | <COLON:":">
    | <LEFTPARENTHESES:"(">
    | <RIGHTPARENTHESES:")">
    | <EQUAL:"=">
    | <PLUS:"+">
    | <MINUS:"-">
    | <TIMES:"*">
    | <DIVIDE:"/">
    | <DOT:".">
    | <GREATERTHAN:">">
    | <GREATERTHANOREQUALTO:">=">
    | <LESSTHAN:"<">
    | <LESSTHANOREQUALTO:"<=">
    | <LEFTQUOTATION:"\"">
    | <NOTEUQAL:"!=">
    | <NOTEQUAL:"<>">
    | <NOTGREATER:"!>">
    | <NOTLESS:"!<">
    | <LQUOTATION:"'">
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93c1\u5b58\u669f */
{
    <INTEGER_LITERAL:["1"-"9"](<DIGIT>)*> |
    <FLOAT_LITERAL: ["1"-"9"](["0"-"9"])* "." (["0"-"9"])* >
}
TOKEN:/*\u7039\u6c2b\u7b9f\u93c1\u677f\u74e7*/
{
    <#DIGIT:["0"-"9"]>
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
    <IDENTIFIER:<LETTER>
    |<LETTER><DIGIT>
    | <LETTER>(<LETTER>| <DIGIT> | <UNDERSCORE>)*(<LETTER>| <DIGIT>)+>
    | <#LETTER:["a"-"z", "A"-"Z"]>
}/* \u7487\ue15f\u7876\u7459\uff46\u703d*/
ASTTableName TableName():{/*@bgen(jjtree) TableName */
                          ASTTableName jjtn000 = new ASTTableName(JJTTABLENAME);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token y;}
{/*@bgen(jjtree) TableName */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);return jjtn000;}
    | LOOKAHEAD(2)t = <IDENTIFIER>{jjtn000.setDbName(t.image);jjtn000.setHavaDb(true);} <DOT> y = <IDENTIFIER>/*@bgen(jjtree)*/
                                                                                                              {
                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                jjtc000 = false;
                                                                                                              }
/*@egen*/{jjtn000.setName(y.image);return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTColumnName ColumnName():{/*@bgen(jjtree) ColumnName */
                            ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;Token y;}
{/*@bgen(jjtree) ColumnName */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);return jjtn000;}
    | LOOKAHEAD(2)t = <IDENTIFIER>{jjtn000.setTableName(t.image);jjtn000.setHaveTable(true);} <DOT> y = <IDENTIFIER>/*@bgen(jjtree)*/
                                                                                                                    {
                                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                                      jjtc000 = false;
                                                                                                                    }
/*@egen*/{jjtn000.setName(y.image);return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Function():{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <IDENTIFIER><LEFTPARENTHESES>Value()[(<COMMA> Value())+]<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void StringLiteral():{/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <LQUOTATION><IDENTIFIER><LQUOTATION>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void NumericLiteral():{/*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumericLiteral */
    try {
/*@egen*/
    <INTEGER_LITERAL> | <FLOAT_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LiteralValue():{/*@bgen(jjtree) LiteralValue */
  ASTLiteralValue jjtn000 = new ASTLiteralValue(JJTLITERALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralValue */
    try {
/*@egen*/
    NumericLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
SimpleNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Statement() ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Statement() : {/*@bgen(jjtree) Statement */
                    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ASTSelectStmt selectStmt;}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    selectStmt = SelectStmt()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.setType(1);jjtn000.setAstSelectStmt(selectStmt);}
    |CreT()|DropT()|DelT()|InsT()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u93cc\u30e8\ue1d7\u7487\ue15e\u5f5e
*/
ASTSelectStmt SelectStmt():
{/*@bgen(jjtree) SelectStmt */
    ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTResult astResult;
    ASTFromList astFromList;
}
{/*@bgen(jjtree) SelectStmt */
    try {
/*@egen*/
    <SELECT>[<DISTINCT>]astResult = Result(){jjtn000.setAstResult(astResult);}<FROM>astFromList = FromList(){jjtn000.setAstFromList(astFromList);}[<WHERE> Expression()| LOOKAHEAD(2)Exist()]
    [GroupBy()] /* Group by having\u701b\u612c\u5f5e */
    [OrderBy() ] /* Order\u701b\u612c\u5f5e */
    [Limit()]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ /* Limit\u701b\u612c\u5f5e */
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ArithmeticOperator():{/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <DIVIDE>
    | <PLUS>
    | <MINUS>
    | <TIMES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LogicalOperator():{/*@bgen(jjtree) LogicalOperator */
  ASTLogicalOperator jjtn000 = new ASTLogicalOperator(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalOperator */
    try {
/*@egen*/
    <OR>
    | <AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ComparisonOperator():{/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
    try {
/*@egen*/
    <EQUAL>
    | <LESSTHAN>
    | <LESSTHANOREQUALTO>
    | <GREATERTHAN>
    | <GREATERTHANOREQUALTO>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u95ab\u660f\u7deb-and\u741b\u3128\u63ea\u5bee\ufffd
*/
void AndExpression():{/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpression */
    try {
/*@egen*/
    [<NOT>] Condition()
    [<AND>[<NOT>] Condition()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u95ab\u660f\u7deb-or\u741b\u3128\u63ea\u5bee\ufffd
*/
void OrExpression():{/*@bgen(jjtree) OrExpression */
  ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpression */
    try {
/*@egen*/
    AndExpression() [<OR> AndExpression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u7ecc\u54c4\ufffd\u8270\u3003\u6748\u60e7\u7d21
*/
void NullExpression():{/*@bgen(jjtree) NullExpression */
  ASTNullExpression jjtn000 = new ASTNullExpression(JJTNULLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullExpression */
    try {
/*@egen*/
    ColumnName()
    <ISNULL>
    | <IS> [<NOT>] <NULL>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* like\u9356\u5f52\u53a4\u741b\u3128\u63ea\u5bee\ufffd
*/
void LikeExpression():{/*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LikeExpression */
    try {
/*@egen*/
    ColumnName()
    [<NOT>] <LIKE> StringLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* in\u9352\u3086\u67c7\u741b\u3128\u63ea\u5bee\ufffd
*/
void InExpression():{/*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InExpression */
    try {
/*@egen*/
    ColumnName()
    [<NOT>] <IN> <LEFTPARENTHESES> Value() [(<COMMA> Value())+]<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* between\u741b\u3128\u63ea\u5bee\ufffd
*/
void BetweenExpression():{/*@bgen(jjtree) BetweenExpression */
  ASTBetweenExpression jjtn000 = new ASTBetweenExpression(JJTBETWEENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BetweenExpression */
    try {
/*@egen*/
    ColumnName()
    [<NOT>] <BETWEEN> Value() <AND> Value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u59e3\u65c7\u7ddd\u741b\u3128\u63ea\u5bee\ufffd
*/
void ComparisonExpression():{/*@bgen(jjtree) ComparisonExpression */
  ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonExpression */
    try {
/*@egen*/
    ColumnName()
    (<EQUAL>
    | <LESSTHAN>
    | <LESSTHANOREQUALTO>
    | <GREATERTHAN>
    | <GREATERTHANOREQUALTO>
    | <NOTEQUAL>
    | <NOTGREATER>
    | <NOTLESS> )
    Value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Value():{/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Value */
    try {
/*@egen*/
    NumericLiteral() | LOOKAHEAD(2)StringLiteral() | ColumnName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Expression():{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    OrExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* where\u93c9\u2032\u6b22
*/
void Condition():{/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    LOOKAHEAD(2)ComparisonExpression()
    | LOOKAHEAD(2)InExpression()
    | LOOKAHEAD(2)BetweenExpression()
    | LOOKAHEAD(2)LikeExpression()
    | LOOKAHEAD(2)NullExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* ORDER BY\u701b\u612c\u5f5e
*/
void OrderBy():{/*@bgen(jjtree) OrderBy */
  ASTOrderBy jjtn000 = new ASTOrderBy(JJTORDERBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderBy */
    try {
/*@egen*/
    <ORDER> <BY> ColumnName() [(<COMMA> ColumnName())+] [<ASC> |<DESC>][<NULL> (<FIRST> |<LAST>)]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* GROUP BY \u701b\u612c\u5f5e
*/
void GroupBy():{/*@bgen(jjtree) GroupBy */
  ASTGroupBy jjtn000 = new ASTGroupBy(JJTGROUPBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GroupBy */
    try {
/*@egen*/
    <GROUP> <BY> ColumnName() [(<COMMA>ColumnName() )+] [<HAVING> Expression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* LIMIT\u701b\u612c\u5f5e
*/
void Limit():{/*@bgen(jjtree) Limit */
  ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Limit */
    try {
/*@egen*/
    <LIMIT> <INTEGER_LITERAL> [<OFFSET> <INTEGER_LITERAL> | <COMMA> <INTEGER_LITERAL>]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* Exist
*/
void Exist():{/*@bgen(jjtree) Exist */
  ASTExist jjtn000 = new ASTExist(JJTEXIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exist */
    try {
/*@egen*/
    [<NOT>] <EXISTS> <LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Operator():{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
    ArithmeticOperator() | LogicalOperator() | ComparisonOperator()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTResult Result():
{/*@bgen(jjtree) Result */
    ASTResult jjtn000 = new ASTResult(JJTRESULT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTResultColumn astResultColumn;
}
{/*@bgen(jjtree) Result */
    try {
/*@egen*/
    <TIMES>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/{jjtn000.setAll(true);return jjtn000;} | astResultColumn = ResultColumn(){jjtn000.getResultColumns().add(astResultColumn);}
    [(<COMMA>astResultColumn = ResultColumn(){jjtn000.getResultColumns().add(astResultColumn);})+]/*@bgen(jjtree)*/
                                                                                                  {
                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                    jjtc000 = false;
                                                                                                  }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTResultColumn ResultColumn():
{/*@bgen(jjtree) ResultColumn */
    ASTResultColumn jjtn000 = new ASTResultColumn(JJTRESULTCOLUMN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTTableName tableName;
    ASTColumnName columnName;
    ASTFunction function;
    Token t;
}
{/*@bgen(jjtree) ResultColumn */
    try {
/*@egen*/
    LOOKAHEAD(4)tableName = TableName()<DOT><TIMES>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/{jjtn000.setTableName(tableName);jjtn000.setType(1);return jjtn000;}
    | LOOKAHEAD(4)columnName = ColumnName(){jjtn000.setColumnName(columnName);jjtn000.setType(2); }[<AS> t = <IDENTIFIER>{jjtn000.setHaveAlias(Boolean.TRUE);jjtn000.setAlias(t.image);}]/*@bgen(jjtree)*/
                                                                                                                                                                                         {
                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                         }
/*@egen*/{return jjtn000;}
    | LOOKAHEAD(2)Function()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.setType(3);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Expr():{}
//{
//    LOOKAHEAD(2)ColumnName() Exprr()
//    | LOOKAHEAD(2)LiteralValue() Exprr()
//    | LOOKAHEAD(2)TableName()<DOT>ColumnName() Exprr()
//    | LOOKAHEAD(2)Function()
//    | LOOKAHEAD(2)<LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES> Exprr()
//}
//void Exprr():{}
//{
//    [Operator() Expr() Exprr()
//    | LOOKAHEAD(2)[<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/Exprr()
//    | LOOKAHEAD(2)[<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */Exprr()
//    | LOOKAHEAD(2)(<NOTNULL> | <ISNULL> | <NOT> <NULL> )Exprr()
//    | LOOKAHEAD(2)[<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */Exprr()]
//}
//void Exprrtemp():{}
//{
//    ColumnName()
//    | LiteralValue()
//    | TableName()<DOT>ColumnName()
//    | FunctionName()<LEFTPARENTHESES> [Expr()[(<COMMA>Expr())+]] |[<COMMA>] <RIGHTPARENTHESES>
//    | Expr() Operator() Expr()
//    | <LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES>
//    | Expr() [<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/
//    | Expr() [<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */
//    | Expr() (<NOTNULL> | <ISNULL> | <NOT> <NULL> )
//    | Expr() [<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */
//}
ASTFromList FromList():{/*@bgen(jjtree) FromList */
                        ASTFromList jjtn000 = new ASTFromList(JJTFROMLIST);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ASTFromTable fromTable;}
{/*@bgen(jjtree) FromList */
    try {
/*@egen*/
    fromTable = FromTable(){jjtn000.getFromTables().add(fromTable);}[(<COMMA>fromTable = FromTable(){jjtn000.getFromTables().add(fromTable);})+]/*@bgen(jjtree)*/
                                                                                                                                                {
                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                  jjtc000 = false;
                                                                                                                                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTFromTable FromTable():{/*@bgen(jjtree) FromTable */
                          ASTFromTable jjtn000 = new ASTFromTable(JJTFROMTABLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName;Token t;}
{/*@bgen(jjtree) FromTable */
    try {
/*@egen*/
    tableName = TableName(){jjtn000.setTableName(tableName);} [[<AS>] t = <IDENTIFIER>{jjtn000.setHavaAlias(true);jjtn000.setAlias(t.image);}]/*@bgen(jjtree)*/
                                                                                                                                              {
                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                jjtc000 = false;
                                                                                                                                              }
/*@egen*/{return jjtn000;}
    /* TODO:\u6769\u70b4\u5e34\u93cc\u30e8\ue1d7\u935c\u5c7d\u7975\u6fc2\u6941\u7161\u7487\ufffd */
    | LOOKAHEAD(2)<LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Condition():{}
//{
//    /*[Condition()<AND>Condition()]|*/
//    /*[Tuple()<IN>Query()]*/
//    Expr()
//    | Expr() <IS> <NULL>
//    | Expr() <NOTNULL>
//    | Expr() <ISNULL>
//}
void Tuple():{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tuple */
    try {
/*@egen*/
    Attribute()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void CreT():{/*@bgen(jjtree) CreT */
  ASTCreT jjtn000 = new ASTCreT(JJTCRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CreT */
    try {
/*@egen*/
    <CREATE><TABLE>Relation()<LEFTPARENTHESES>ColList()<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ColList():{/*@bgen(jjtree) ColList */
  ASTColList jjtn000 = new ASTColList(JJTCOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColList */
    try {
/*@egen*/
    Attribute()Type()[(<COMMA>Attribute()Type())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Type():{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT>|<DATE>|<CHAR><LEFTPARENTHESES><INTEGER_LITERAL><RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void DropT():{/*@bgen(jjtree) DropT */
  ASTDropT jjtn000 = new ASTDropT(JJTDROPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DropT */
    try {
/*@egen*/
    <DROP><TABLE>Relation()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void DelT():{/*@bgen(jjtree) DelT */
  ASTDelT jjtn000 = new ASTDelT(JJTDELT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DelT */
    try {
/*@egen*/
    <DELETE>DelList()<FROM>FromList()<WHERE>Condition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void DelList():{/*@bgen(jjtree) DelList */
  ASTDelList jjtn000 = new ASTDelList(JJTDELLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DelList */
    try {
/*@egen*/
    Attribute()[(<COMMA>Attribute())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void InsT():{/*@bgen(jjtree) InsT */
  ASTInsT jjtn000 = new ASTInsT(JJTINST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InsT */
    try {
/*@egen*/
    <INSERT><INTO>Relation()<LEFTPARENTHESES>InList()<RIGHTPARENTHESES><VALUES><LEFTPARENTHESES>VList()<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void InList():{/*@bgen(jjtree) InList */
  ASTInList jjtn000 = new ASTInList(JJTINLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InList */
    try {
/*@egen*/
    Attribute()[(<COMMA>Attribute())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void VList():{/*@bgen(jjtree) VList */
  ASTVList jjtn000 = new ASTVList(JJTVLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VList */
    try {
/*@egen*/
    <LEFTQUOTATION>IDENTIFIER()<LEFTQUOTATION>[(<COMMA><LEFTQUOTATION>IDENTIFIER()<LEFTQUOTATION>)+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void Attribute():{/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Relation():{/*@bgen(jjtree) Relation */
  ASTRelation jjtn000 = new ASTRelation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Pattern():{/*@bgen(jjtree) Pattern */
  ASTPattern jjtn000 = new ASTPattern(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
    try {
/*@egen*/
    <LQUOTATION>IDENTIFIER()<LQUOTATION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void IDENTIFIER():{/*@bgen(jjtree) IDENTIFIER */
  ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}