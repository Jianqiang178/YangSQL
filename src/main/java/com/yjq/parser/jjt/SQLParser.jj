/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLParser.jj */
/*@egen*/options {
    STATIC = false ;
                  
                   
    UNICODE_PARSER = true;
}
PARSER_BEGIN(SQLParser)
package com.yjq.parser.jjt;

import com.sun.org.apache.bcel.internal.generic.ARETURN;
import com.yjq.parser.exceptions.YangSQLException;
import com.yjq.parser.jjt.*;
import com.yjq.parser.operator.*;
import com.yjq.parser.server.*;
import java.util.Arrays;
public class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSQLParserState jjtree = new JJTSQLParserState();

/*@egen*/
    public static void main(String args[]) {
        CreateAndInsert.initDb();
        System.out.println("Reading from standard input...");
        while (true){
            try{
                SQLParser p = new SQLParser(System.in);
                System.out.print("YangSQL > ");
                SimpleNode n = p.Start();
                n.getStatement().exec();
//                    n.dump("");
//                    System.out.println("");
            }catch (ParseException e){
                System.out.println("Error: " + "have an error in SQL syntax near '" + e.currentToken +"'");
            }catch (YangSQLException e){
                System.out.println("Error: " + e.getMessage());
            }catch (Exception e){
                System.out.println(e.getMessage());
//                    e.printStackTrace();
            }
        }
    }}
PARSER_END(SQLParser)/*\u7039\u6c2b\u7b9f\u7487\u5d86\u7876\u9352\u55d8\u703d*/
SKIP:{" "}
SKIP : {"\t"}
SKIP:{"\n"|"\r"|"\r\n"}TOKEN:/*\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd*/
{ <CREATE:"create">
    | <TABLE:"table">
    | <DROP:"drop">
    | <DELETE:"delete">
    | <UPDATE:"update">
    | <SELECT:"select">
    | <INSERT:"insert">
    | <WHERE:"where">
    | <SET:"set">
    | <FROM:"from">
    | <INTO:"into">
    | <DISTINCT:"distinct">
    | <ALL:"all">
    | <LIKE:"like">
    | <ORDER:"order">
    | <BY:"by">
    | <AS:"as">
    | <VALUES:"values">
    | <AND:"and">
    | <IN:"in">
    | <INT:"int">
    | <CHAR:"char">
    | <DATE:"date">
    | <DOUBLE:"double">
    | <IS:"is">
    | <NOT:"not">
    | <ISNULL:"isnull">
    | <NOTNULL:"NOTNULL">
    | <NULL:"null">
    | <OR:"or">
    | <BETWEEN:"between">
    | <GROUP:"group">
    | <HAVING:"having">
    | <LIMIT:"limit">
    | <OFFSET:"offset">
    | <ASC:"asc">
    | <DESC:"desc">
    | <LAST:"last">
    | <FIRST:"first">
    | <NULLS:"nulls">
    | <EXISTS:"exists">
    | <REFERENCES:"references">
    | <FOREIGN:"foreign">
    | <PRIMARY:"primary">
    | <KEY:"key">
    | <UNIQUE:"unique">
}
TOKEN:/*\u7039\u6c2b\u7b9f\u7ed7\ufe40\u5f7f*/
{
    <UNDERSCORE:"_">
    | <COMMA:",">
    | <SEMICOLON:";">
    | <COLON:":">
    | <LEFTPARENTHESES:"(">
    | <RIGHTPARENTHESES:")">
    | <EQUAL:"=">
    | <PLUS:"+">
    | <MINUS:"-">
    | <TIMES:"*">
    | <DIVIDE:"/">
    | <DOT:".">
    | <GREATERTHAN:">">
    | <GREATERTHANOREQUALTO:">=">
    | <LESSTHAN:"<">
    | <LESSTHANOREQUALTO:"<=">
    | <LEFTQUOTATION:"\"">
    | <NOTEUQAL:"!=">
    | <NOTEQUAL:"<>">
    | <NOTGREATER:"!>">
    | <NOTLESS:"!<">
    | <LQUOTATION:"'">
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93c1\u5b58\u669f */
{
    <INTEGER_LITERAL:["0"]|(["1"-"9"](<DIGIT>)*)> |
    <FLOAT_LITERAL: ["1"-"9"](["0"-"9"])* "." (["0"-"9"])* >
}
TOKEN:
{
    <SYMBOL:["_", "%"]>
}
TOKEN:/*\u7039\u6c2b\u7b9f\u93c1\u677f\u74e7*/
{
    <#DIGIT:["0"-"9"]>
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
    <IDENTIFIER:<LETTER>
    |<LETTER><DIGIT>
    | <LETTER>(<LETTER>| <DIGIT> | <UNDERSCORE>)*(<LETTER>| <DIGIT>)+>
    | <#LETTER:["a"-"z", "A"-"Z"]| <SYMBOL> >
}/* \u7487\ue15f\u7876\u7459\uff46\u703d*/
TOKEN : {
    <#CHARC: <LETTER> | <DIGIT> | ["\u4e00"-"\u9fa5"]>|
    <STRING: (<CHARC>)+>
}
ASTTableName TableName():{/*@bgen(jjtree) TableName */
                          ASTTableName jjtn000 = new ASTTableName(JJTTABLENAME);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token y;}
{/*@bgen(jjtree) TableName */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);return jjtn000;}
    | LOOKAHEAD(2)t = <IDENTIFIER>{jjtn000.setDbName(t.image);jjtn000.setHavaDb(true);} <DOT> y = <IDENTIFIER>/*@bgen(jjtree)*/
                                                                                                              {
                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                jjtc000 = false;
                                                                                                              }
/*@egen*/{jjtn000.setName(y.image);return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTColumnName ColumnName():{/*@bgen(jjtree) ColumnName */
                            ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;Token y;}
{/*@bgen(jjtree) ColumnName */
    try {
/*@egen*/
    t = <IDENTIFIER>{jjtn000.setName(t.image);} [<DOT> y = <IDENTIFIER>{jjtn000.setName(y.image);jjtn000.setTableName(t.image);jjtn000.setHaveTable(true);}]/*@bgen(jjtree)*/
                                                                                                                                                            {
                                                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                              jjtc000 = false;
                                                                                                                                                            }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Function():{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <IDENTIFIER><LEFTPARENTHESES>Value()[(<COMMA> Value())+]<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTStringLiteral StringLiteral():{/*@bgen(jjtree) StringLiteral */
                                  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <LQUOTATION>(t = <STRING> | t = <IDENTIFIER>) {jjtn000.setValue(t.image);}<LQUOTATION>/*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
                                                                                          }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTNumericLiteral NumericLiteral():{/*@bgen(jjtree) NumericLiteral */
                                    ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NumericLiteral */
    try {
/*@egen*/
    t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.setIntegerValue(Integer.parseInt(t.image));return jjtn000;}
    | t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.setDoubleValue(Double.parseDouble(t.image));return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LiteralValue():{/*@bgen(jjtree) LiteralValue */
  ASTLiteralValue jjtn000 = new ASTLiteralValue(JJTLITERALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralValue */
    try {
/*@egen*/
    NumericLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
SimpleNode Start() : {/*@bgen(jjtree) Start */
                      ASTStart jjtn000 = new ASTStart(JJTSTART);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ASTStatement statement;}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    statement = Statement(){jjtn000.setStatement(statement);} ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTStatement Statement() : {/*@bgen(jjtree) Statement */
                            ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTSelectStmt selectStmt; ASTCreateStmt createStmt; ASTInsertStmt insertStmt; ASTUpdateStmt updateStmt; ASTDeleteStmt deleteStmt;}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    selectStmt = SelectStmt()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{jjtn000.setType(1);jjtn000.setAstSelectStmt(selectStmt);return jjtn000;}
    |createStmt = CreateStmt()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setType(2);jjtn000.setCreateStmt(createStmt);return jjtn000;}
    |DropT()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{return jjtn000;}
    |deleteStmt = DeleteStmt()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setType(4);jjtn000.setDeleteStmt(deleteStmt);return jjtn000;}
    |insertStmt = InsertStmt()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setType(5);jjtn000.setInsertStmt(insertStmt);return jjtn000;}
    |updateStmt = UpdateStmt()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{jjtn000.setType(6); jjtn000.setUpdateStmt(updateStmt);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u93cc\u30e8\ue1d7\u7487\ue15e\u5f5e
*/
ASTSelectStmt SelectStmt():
{/*@bgen(jjtree) SelectStmt */
    ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTResult astResult;
    ASTFromList astFromList;
    ASTExpression expression;
    ASTOrderBy orderBy;
    ASTLimit limit;
}
{/*@bgen(jjtree) SelectStmt */
    try {
/*@egen*/
    <SELECT>[<DISTINCT>]astResult = Result(){jjtn000.setAstResult(astResult);}<FROM>astFromList = FromList(){jjtn000.setAstFromList(astFromList);}
    [<WHERE> expression = Expression(){jjtn000.setExpression(expression);}| LOOKAHEAD(2)Exist()]
    [GroupBy()] /* Group by having\u701b\u612c\u5f5e */
    [orderBy = OrderBy(){jjtn000.setOrderBy(orderBy);}] /* Order\u701b\u612c\u5f5e */
    [limit = Limit(){jjtn000.setLimit(limit);}]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ /* Limit\u701b\u612c\u5f5e */
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ArithmeticOperator():{/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <DIVIDE>
    | <PLUS>
    | <MINUS>
    | <TIMES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LogicalOperator():{/*@bgen(jjtree) LogicalOperator */
  ASTLogicalOperator jjtn000 = new ASTLogicalOperator(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalOperator */
    try {
/*@egen*/
    <OR>
    | <AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ComparisonOperator():{/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
    try {
/*@egen*/
    <EQUAL>
    | <LESSTHAN>
    | <LESSTHANOREQUALTO>
    | <GREATERTHAN>
    | <GREATERTHANOREQUALTO>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u95ab\u660f\u7deb-and\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTAndExpression AndExpression():{/*@bgen(jjtree) AndExpression */
                                  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ASTCondition condition;}
{/*@bgen(jjtree) AndExpression */
    try {
/*@egen*/
    [<NOT>{jjtn000.setLeftNot(true);}] condition = Condition(){jjtn000.setLeft(condition);}
    [<AND>{jjtn000.setAnd(true);}[<NOT>{jjtn000.setRightNot(true);}] condition = Condition(){jjtn000.setRight(condition);}]/*@bgen(jjtree)*/
                                                                                                                           {
                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                             jjtc000 = false;
                                                                                                                           }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u95ab\u660f\u7deb-or\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTOrExpression OrExpression():{/*@bgen(jjtree) OrExpression */
                                ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ASTAndExpression astAndExpression;}
{/*@bgen(jjtree) OrExpression */
    try {
/*@egen*/
    astAndExpression = AndExpression(){jjtn000.setLeft(astAndExpression);}
    [<OR>{jjtn000.setOr(true);} astAndExpression = AndExpression(){jjtn000.setRight(astAndExpression);}]/*@bgen(jjtree)*/
                                                                                                        {
                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                          jjtc000 = false;
                                                                                                        }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u7ecc\u54c4\ufffd\u8270\u3003\u6748\u60e7\u7d21
*/
ASTNullExpression NullExpression():{/*@bgen(jjtree) NullExpression */
                                    ASTNullExpression jjtn000 = new ASTNullExpression(JJTNULLEXPRESSION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName;}
{/*@bgen(jjtree) NullExpression */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);}
    (<ISNULL>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{jjtn000.setNull(true);return jjtn000;}
    | (<IS>{jjtn000.setIs(true);} [<NOT>{jjtn000.setNot(true);}] <NULL>/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/{jjtn000.setNulls(true);return jjtn000;}))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* like\u9356\u5f52\u53a4\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTLikeExpression LikeExpression():{/*@bgen(jjtree) LikeExpression */
                                    ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName;ASTStringLiteral stringLiteral;}
{/*@bgen(jjtree) LikeExpression */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);}
    [<NOT>{jjtn000.setNot(true);}] <LIKE> stringLiteral = StringLiteral()/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                         }
/*@egen*/{jjtn000.setStringLiteral(stringLiteral);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* in\u9352\u3086\u67c7\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTInExpression InExpression():{/*@bgen(jjtree) InExpression */
                                ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName; ASTData data;}
{/*@bgen(jjtree) InExpression */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);}
    [<NOT>{jjtn000.setNot(true);}] <IN> <LEFTPARENTHESES> data = Data(){jjtn000.getData().add(data);} [(<COMMA> data = Data(){jjtn000.getData().add(data);})+]<RIGHTPARENTHESES>/*@bgen(jjtree)*/
                                                                                                                                                                                {
                                                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                  jjtc000 = false;
                                                                                                                                                                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* between\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTBetweenExpression BetweenExpression():{/*@bgen(jjtree) BetweenExpression */
                                          ASTBetweenExpression jjtn000 = new ASTBetweenExpression(JJTBETWEENEXPRESSION);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName; ASTData data;}
{/*@bgen(jjtree) BetweenExpression */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);}
    [<NOT>{jjtn000.setNot(true);}] <BETWEEN> data = Data(){jjtn000.setFirst(data);} <AND> data = Data(){jjtn000.setSecond(data);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u59e3\u65c7\u7ddd\u741b\u3128\u63ea\u5bee\ufffd
*/
ASTComparisonExpression ComparisonExpression():
{/*@bgen(jjtree) ComparisonExpression */
    ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTColumnName columnName;
    ASTValue value;
}
{/*@bgen(jjtree) ComparisonExpression */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);}
    (<EQUAL>{jjtn000.setOperator(new Equal());}
    | <LESSTHAN>{jjtn000.setOperator(new LessThan());}
    | <LESSTHANOREQUALTO>{jjtn000.setOperator(new LessThanOrEqualTo());}
    | <GREATERTHAN>{jjtn000.setOperator(new GreaterThan());}
    | <GREATERTHANOREQUALTO>{jjtn000.setOperator(new GreaterThanOrEqualTo());}
    | <NOTEQUAL>{jjtn000.setOperator(new NotEqual());}
    | <NOTGREATER>{jjtn000.setOperator(new LessThanOrEqualTo());}
    | <NOTLESS>{jjtn000.setOperator(new GreaterThanOrEqualTo());})
    value = Value()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setValue(value);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTData Data():{/*@bgen(jjtree) Data */
                ASTData jjtn000 = new ASTData(JJTDATA);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/ASTNumericLiteral numericLiteral;ASTStringLiteral stringLiteral;}
{/*@bgen(jjtree) Data */
    try {
/*@egen*/
    numericLiteral = NumericLiteral()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.setNumericLiteral(numericLiteral); return jjtn000;}
    | stringLiteral = StringLiteral()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.setStringLiteral(stringLiteral); return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTValue Value():
{/*@bgen(jjtree) Value */
    ASTValue jjtn000 = new ASTValue(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTData data;
    ASTColumnName columnName;
}
{/*@bgen(jjtree) Value */
    try {
/*@egen*/
    data = Data()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setData(data);return jjtn000;}
    | columnName = ColumnName()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{jjtn000.setColumnName(columnName);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTExpression Expression():{/*@bgen(jjtree) Expression */
                            ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTOrExpression expression;}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    expression = OrExpression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{jjtn000.setOrExpression(expression);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* where\u93c9\u2032\u6b22
*/
ASTCondition Condition():
{/*@bgen(jjtree) Condition */
    ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTComparisonExpression comparisonExpression;
    ASTInExpression inExpression;
    ASTBetweenExpression betweenExpression;
    ASTLikeExpression likeExpression;
    ASTNullExpression nullExpression;
}
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    LOOKAHEAD(2)comparisonExpression = ComparisonExpression()/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                             }
/*@egen*/{jjtn000.setExpression(comparisonExpression);return jjtn000;}
    | LOOKAHEAD(2)inExpression = InExpression()/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/{jjtn000.setExpression(inExpression);return jjtn000;}
    | LOOKAHEAD(2)betweenExpression = BetweenExpression()/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/{jjtn000.setExpression(betweenExpression);return jjtn000;}
    | LOOKAHEAD(2)likeExpression = LikeExpression()/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/{jjtn000.setExpression(likeExpression);return jjtn000;}
    | LOOKAHEAD(2)nullExpression = NullExpression()/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/{jjtn000.setExpression(nullExpression);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* ORDER BY\u701b\u612c\u5f5e
*/
ASTOrderBy OrderBy():{/*@bgen(jjtree) OrderBy */
                      ASTOrderBy jjtn000 = new ASTOrderBy(JJTORDERBY);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName;}
{/*@bgen(jjtree) OrderBy */
    try {
/*@egen*/
    <ORDER> <BY> columnName = ColumnName(){jjtn000.getColumnNames().add(columnName);}
    [(<COMMA> columnName = ColumnName(){jjtn000.getColumnNames().add(columnName);})+]
    [<ASC>{jjtn000.setAsc(true);} |<DESC>{jjtn000.setAsc(false);}]
    [<NULL>{jjtn000.setNulls(true);} (<FIRST>{jjtn000.setNullFirst(true);} |<LAST>{jjtn000.setNullLast(true);})]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* GROUP BY \u701b\u612c\u5f5e
*/
void GroupBy():{/*@bgen(jjtree) GroupBy */
  ASTGroupBy jjtn000 = new ASTGroupBy(JJTGROUPBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GroupBy */
    try {
/*@egen*/
    <GROUP> <BY> ColumnName() [(<COMMA>ColumnName() )+] [<HAVING> Expression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* LIMIT\u701b\u612c\u5f5e
*/
ASTLimit Limit():{/*@bgen(jjtree) Limit */
                  ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Limit */
    try {
/*@egen*/
    <LIMIT> t = <INTEGER_LITERAL>{jjtn000.setLimit(Integer.parseInt(t.image));}
    [(<OFFSET> t = <INTEGER_LITERAL>){jjtn000.setOffset(Integer.parseInt(t.image));} | <COMMA> t = <INTEGER_LITERAL>{jjtn000.setOffset(Integer.parseInt(t.image));}]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* Exist
*/
void Exist():{/*@bgen(jjtree) Exist */
  ASTExist jjtn000 = new ASTExist(JJTEXIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exist */
    try {
/*@egen*/
    [<NOT>] <EXISTS> <LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Operator():{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
    ArithmeticOperator() | LogicalOperator() | ComparisonOperator()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTResult Result():
{/*@bgen(jjtree) Result */
    ASTResult jjtn000 = new ASTResult(JJTRESULT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTResultColumn astResultColumn;
}
{/*@bgen(jjtree) Result */
    try {
/*@egen*/
    <TIMES>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/{jjtn000.setAll(true);return jjtn000;}
    | (astResultColumn = ResultColumn(){jjtn000.getResultColumns().add(astResultColumn);}[(<COMMA>astResultColumn = ResultColumn(){jjtn000.getResultColumns().add(astResultColumn);})+]/*@bgen(jjtree)*/
                                                                                                                                                                                       {
                                                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                         jjtc000 = false;
                                                                                                                                                                                       }
/*@egen*/{return jjtn000;})/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTResultColumn ResultColumn():
{/*@bgen(jjtree) ResultColumn */
    ASTResultColumn jjtn000 = new ASTResultColumn(JJTRESULTCOLUMN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTTableName tableName;
    ASTColumnName columnName;
    ASTFunction function;
    Token t;
}
{/*@bgen(jjtree) ResultColumn */
    try {
/*@egen*/
    LOOKAHEAD(4)tableName = TableName()<DOT><TIMES>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/{jjtn000.setTableName(tableName);jjtn000.setType(1);return jjtn000;}
    | LOOKAHEAD(4)columnName = ColumnName(){jjtn000.setColumnName(columnName);jjtn000.setType(2); }[<AS> t = <IDENTIFIER>{jjtn000.setHaveAlias(Boolean.TRUE);jjtn000.setAlias(t.image);}]/*@bgen(jjtree)*/
                                                                                                                                                                                         {
                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                         }
/*@egen*/{return jjtn000;}
    | LOOKAHEAD(2)Function()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{jjtn000.setType(3);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Expr():{}
//{
//    LOOKAHEAD(2)ColumnName() Exprr()
//    | LOOKAHEAD(2)LiteralValue() Exprr()
//    | LOOKAHEAD(2)TableName()<DOT>ColumnName() Exprr()
//    | LOOKAHEAD(2)Function()
//    | LOOKAHEAD(2)<LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES> Exprr()
//}
//void Exprr():{}
//{
//    [Operator() Expr() Exprr()
//    | LOOKAHEAD(2)[<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/Exprr()
//    | LOOKAHEAD(2)[<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */Exprr()
//    | LOOKAHEAD(2)(<NOTNULL> | <ISNULL> | <NOT> <NULL> )Exprr()
//    | LOOKAHEAD(2)[<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */Exprr()]
//}
//void Exprrtemp():{}
//{
//    ColumnName()
//    | LiteralValue()
//    | TableName()<DOT>ColumnName()
//    | FunctionName()<LEFTPARENTHESES> [Expr()[(<COMMA>Expr())+]] |[<COMMA>] <RIGHTPARENTHESES>
//    | Expr() Operator() Expr()
//    | <LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES>
//    | Expr() [<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/
//    | Expr() [<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */
//    | Expr() (<NOTNULL> | <ISNULL> | <NOT> <NULL> )
//    | Expr() [<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */
//}
ASTFromList FromList():{/*@bgen(jjtree) FromList */
                        ASTFromList jjtn000 = new ASTFromList(JJTFROMLIST);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ASTFromTable fromTable;}
{/*@bgen(jjtree) FromList */
    try {
/*@egen*/
    fromTable = FromTable(){jjtn000.getFromTables().add(fromTable);}[(<COMMA>fromTable = FromTable(){jjtn000.getFromTables().add(fromTable);})+]/*@bgen(jjtree)*/
                                                                                                                                                {
                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                  jjtc000 = false;
                                                                                                                                                }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTFromTable FromTable():{/*@bgen(jjtree) FromTable */
                          ASTFromTable jjtn000 = new ASTFromTable(JJTFROMTABLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName;Token t;}
{/*@bgen(jjtree) FromTable */
    try {
/*@egen*/
    tableName = TableName(){jjtn000.setTableName(tableName);} [[<AS>] t = <IDENTIFIER>{jjtn000.setHavaAlias(true);jjtn000.setAlias(t.image);}]/*@bgen(jjtree)*/
                                                                                                                                              {
                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                jjtc000 = false;
                                                                                                                                              }
/*@egen*/{return jjtn000;}
    /* TODO:\u6769\u70b4\u5e34\u93cc\u30e8\ue1d7\u935c\u5c7d\u7975\u6fc2\u6941\u7161\u7487\ufffd */
    | LOOKAHEAD(2)<LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Condition():{}
//{
//    /*[Condition()<AND>Condition()]|*/
//    /*[Tuple()<IN>Query()]*/
//    Expr()
//    | Expr() <IS> <NULL>
//    | Expr() <NOTNULL>
//    | Expr() <ISNULL>
//}
void Tuple():{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tuple */
    try {
/*@egen*/
    Attribute()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*--------- Create \u7487\ue15e\u5f5e ----------*/
ASTCreateStmt CreateStmt():{/*@bgen(jjtree) CreateStmt */
                            ASTCreateStmt jjtn000 = new ASTCreateStmt(JJTCREATESTMT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;ASTColList colList;}
{/*@bgen(jjtree) CreateStmt */
    try {
/*@egen*/
    <CREATE><TABLE>t = <IDENTIFIER>{jjtn000.setTableName(t.image);} <LEFTPARENTHESES>colList = ColList(){jjtn000.setColList(colList);}<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTColList ColList():{/*@bgen(jjtree) ColList */
                      ASTColList jjtn000 = new ASTColList(JJTCOLLIST);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ASTField field;int i = 0;}
{/*@bgen(jjtree) ColList */
    try {
/*@egen*/
    field = Field(){field.setIndex(i);i++;jjtn000.getFields().add(field);}
    [(<COMMA>field = Field(){field.setIndex(i);i++;jjtn000.getFields().add(field);})+]/*@bgen(jjtree)*/
                                                                                      {
                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                        jjtc000 = false;
                                                                                      }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTField Field():{/*@bgen(jjtree) Field */
                  ASTField jjtn000 = new ASTField(JJTFIELD);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; ASTConstraints constraints;}
{/*@bgen(jjtree) Field */
    try {
/*@egen*/
    t = <IDENTIFIER>{jjtn000.setName(t.image);}
    (t = <INT>| t = <DATE>| t = <DOUBLE> | t = <CHAR><LEFTPARENTHESES><INTEGER_LITERAL><RIGHTPARENTHESES>)
    [constraints = Constraints(){jjtn000.setConstraints(constraints);}]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setDataType(t.image);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTConstraints Constraints():{/*@bgen(jjtree) Constraints */
                              ASTConstraints jjtn000 = new ASTConstraints(JJTCONSTRAINTS);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ASTConstraint constraint;}
{/*@bgen(jjtree) Constraints */
    try {
/*@egen*/
    constraint = Constraint(){jjtn000.getConstraintList().add(constraint);} [(constraint = Constraint(){jjtn000.getConstraintList().add(constraint);})+]/*@bgen(jjtree)*/
                                                                                                                                                        {
                                                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                          jjtc000 = false;
                                                                                                                                                        }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTConstraint Constraint():{/*@bgen(jjtree) Constraint */
                            ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName; ASTColumnName columnName;}
{/*@bgen(jjtree) Constraint */
    try {
/*@egen*/
    (<NOT> <NULL>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setType(1);return jjtn000;})
    |(<PRIMARY> <KEY>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setType(2);return jjtn000;})
    |(<FOREIGN> <KEY> <REFERENCES> tableName = TableName(){jjtn000.setTableName(tableName);} <LEFTPARENTHESES> columnName = ColumnName(){jjtn000.setColumnName(columnName);} <RIGHTPARENTHESES>/*@bgen(jjtree)*/
                                                                                                                                                                                               {
                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                               }
/*@egen*/{jjtn000.setType(3);return jjtn000;})
    | <UNIQUE>{jjtn000.setType(4);}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*--------- DELETE & DROP \u7487\ue15e\u5f5e ----------*/
void DropT():{/*@bgen(jjtree) DropT */
  ASTDropT jjtn000 = new ASTDropT(JJTDROPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DropT */
    try {
/*@egen*/
    <DROP><TABLE>Relation()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTDeleteStmt DeleteStmt():{/*@bgen(jjtree) DeleteStmt */
                            ASTDeleteStmt jjtn000 = new ASTDeleteStmt(JJTDELETESTMT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName; ASTExpression expression;}
{/*@bgen(jjtree) DeleteStmt */
    try {
/*@egen*/
    <DELETE><FROM>tableName = TableName(){jjtn000.setTableName(tableName);}<WHERE>expression = Expression()/*@bgen(jjtree)*/
                                                                                                           {
                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                             jjtc000 = false;
                                                                                                           }
/*@egen*/{jjtn000.setExpression(expression);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------- UPDATE \u7487\ue15e\u5f5e -----------*/
ASTUpdateStmt UpdateStmt():{/*@bgen(jjtree) UpdateStmt */
                            ASTUpdateStmt jjtn000 = new ASTUpdateStmt(JJTUPDATESTMT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName;ASTSetList setList; ASTExpression expression;}
{/*@bgen(jjtree) UpdateStmt */
    try {
/*@egen*/
    <UPDATE> tableName = TableName(){jjtn000.setTableName(tableName);}
    <SET> setList = SetList(){jjtn000.setSetList(setList);}
    <WHERE> expression = Expression()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{jjtn000.setExpression(expression);return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTSetList SetList():{/*@bgen(jjtree) SetList */
                      ASTSetList jjtn000 = new ASTSetList(JJTSETLIST);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ASTUpdateValue updateValue;}
{/*@bgen(jjtree) SetList */
    try {
/*@egen*/
    updateValue = UpdateValue(){jjtn000.getUpdateValues().add(updateValue);} [(<COMMA> updateValue = UpdateValue(){jjtn000.getUpdateValues().add(updateValue);})+]/*@bgen(jjtree)*/
                                                                                                                                                                  {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                    jjtc000 = false;
                                                                                                                                                                  }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTUpdateValue UpdateValue():{/*@bgen(jjtree) UpdateValue */
                              ASTUpdateValue jjtn000 = new ASTUpdateValue(JJTUPDATEVALUE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName;ASTData data;}
{/*@bgen(jjtree) UpdateValue */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.setColumnName(columnName);} <EQUAL> data = Data()/*@bgen(jjtree)*/
                                                                                       {
                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                         jjtc000 = false;
                                                                                       }
/*@egen*/{jjtn000.setData(data); return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------- INSERT \u7487\ue15e\u5f5e -----------*/
ASTInsertStmt InsertStmt():{/*@bgen(jjtree) InsertStmt */
                            ASTInsertStmt jjtn000 = new ASTInsertStmt(JJTINSERTSTMT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTTableName tableName; ASTColumnList columnList; ASTDataList dataList;}
{/*@bgen(jjtree) InsertStmt */
    try {
/*@egen*/
    <INSERT><INTO>tableName = TableName(){jjtn000.setTableName(tableName);}[<LEFTPARENTHESES>columnList = ColumnList(){jjtn000.setColumnList(columnList);}<RIGHTPARENTHESES>]
    <VALUES><LEFTPARENTHESES>dataList = DataList(){jjtn000.setDataList(dataList);}<RIGHTPARENTHESES>/*@bgen(jjtree)*/
                                                                                                    {
                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
                                                                                                    }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTColumnList ColumnList():{/*@bgen(jjtree) ColumnList */
                            ASTColumnList jjtn000 = new ASTColumnList(JJTCOLUMNLIST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ASTColumnName columnName;}
{/*@bgen(jjtree) ColumnList */
    try {
/*@egen*/
    columnName = ColumnName(){jjtn000.getColumnNames().add(columnName);}[(<COMMA> columnName = ColumnName(){jjtn000.getColumnNames().add(columnName);})+]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
ASTDataList DataList():{/*@bgen(jjtree) DataList */
                        ASTDataList jjtn000 = new ASTDataList(JJTDATALIST);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ASTData data;}
{/*@bgen(jjtree) DataList */
    try {
/*@egen*/
    data = Data(){jjtn000.getDataList().add(data);} [(<COMMA> data = Data(){jjtn000.getDataList().add(data);})+]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void Attribute():{/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Relation():{/*@bgen(jjtree) Relation */
  ASTRelation jjtn000 = new ASTRelation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Pattern():{/*@bgen(jjtree) Pattern */
  ASTPattern jjtn000 = new ASTPattern(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
    try {
/*@egen*/
    <LQUOTATION>IDENTIFIER()<LQUOTATION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void IDENTIFIER():{/*@bgen(jjtree) IDENTIFIER */
  ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}