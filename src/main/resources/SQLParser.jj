/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLParser.jj */
/*@egen*/options {
    STATIC = false ;
                  
                   
}
PARSER_BEGIN(SQLParser)
public class SQLParser/*@bgen(jjtree)*/implements SQLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSQLParserState jjtree = new JJTSQLParserState();

/*@egen*/
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        SQLParser p = new SQLParser(System.in);
        try {
          SimpleNode n = p.Start();
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
    }}
PARSER_END(SQLParser)/*\u7039\u6c2b\u7b9f\u7487\u5d86\u7876\u9352\u55d8\u703d*/
SKIP:{" "}
SKIP:{"\n"|"\r"|"\r\n"}TOKEN:/*\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd*/
{ <CREATE:"create">
    | <TABLE:"table">
    | <DROP:"drop">
    | <DELETE:"delete">
    | <SELECT:"select">
    | <INSERT:"insert">
    | <WHERE:"where">
    | <FROM:"from">
    | <INTO:"into">
    | <DISTINCT:"distinct">
    | <ALL:"all">
    | <LIKE:"like">
    | <ORDER:"order">
    | <BY:"by">
    | <AS:"as">
    | <VALUES:"values">
    | <AND:"and">
    | <IN:"in">
    | <INT:"int">
    | <CHAR:"char">
    | <DATE:"date">
    | <IS:"is">
    | <NOT:"not">
    | <ISNULL:"ISNULL">
    | <NOTNULL:"NOTNULL">
    | <NULL:"null">
    | <OR:"or">
    | <BETWEEN:"between">
    | <GROUP:"group">
    | <HAVING:"having">
    | <LIMIT:"limit">
    | <OFFSET:"offset">
    | <ASC:"asc">
    | <DESC:"desc">
    | <LAST:"last">
    | <FIRST:"first">
    | <NULLS:"nulls">
}
TOKEN:/*\u7039\u6c2b\u7b9f\u7ed7\ufe40\u5f7f*/
{
    <UNDERSCORE:"_">
    | <COMMA:",">
    | <SEMICOLON:";">
    | <COLON:":">
    | <LEFTPARENTHESES:"(">
    | <RIGHTPARENTHESES:")">
    | <EQUAL:"=">
    | <PLUS:"+">
    | <MINUS:"-">
    | <TIMES:"*">
    | <DIVIDE:"/">
    | <DOT:".">
    | <GREATERTHAN:">">
    | <GREATERTHANOREQUALTO:">=">
    | <LESSTHAN:"<">
    | <LESSTHANOREQUALTO:"<=">
    | <LEFTQUOTATION:"\"">
    | <LQUOTATION:"'">
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93c1\u5b58\u669f */
{
    <INTEGER_LITERAL:["1"-"9"](<DIGIT>)*> |
    <FLOAT_LITERAL: ["1"-"9"](["0"-"9"])* "." (["0"-"9"])* >
}
TOKEN:/*\u7039\u6c2b\u7b9f\u93c1\u677f\u74e7*/
{
    <#DIGIT:["0"-"9"]>
}
TOKEN:/* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
    <IDENTIFIER:<LETTER>
    |<LETTER><DIGIT>
    | <LETTER>(<LETTER>| <DIGIT> | <UNDERSCORE>)*(<LETTER>| <DIGIT>)+>
    | <#LETTER:["a"-"z", "A"-"Z"]>
}/* \u7487\ue15f\u7876\u7459\uff46\u703d*/
void TableName():{/*@bgen(jjtree) TableName */
  ASTTableName jjtn000 = new ASTTableName(JJTTABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableName */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void TableAlias():{/*@bgen(jjtree) TableAlias */
  ASTTableAlias jjtn000 = new ASTTableAlias(JJTTABLEALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableAlias */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ColumnName():{/*@bgen(jjtree) ColumnName */
  ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnName */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ColumnAlias():{/*@bgen(jjtree) ColumnAlias */
  ASTColumnAlias jjtn000 = new ASTColumnAlias(JJTCOLUMNALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColumnAlias */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void FunctionName():{/*@bgen(jjtree) FunctionName */
  ASTFunctionName jjtn000 = new ASTFunctionName(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionName */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void StringLiteral():{/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void NumericLiteral():{/*@bgen(jjtree) NumericLiteral */
  ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumericLiteral */
    try {
/*@egen*/
    <INTEGER_LITERAL> | <FLOAT_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LiteralValue():{/*@bgen(jjtree) LiteralValue */
  ASTLiteralValue jjtn000 = new ASTLiteralValue(JJTLITERALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LiteralValue */
    try {
/*@egen*/
    NumericLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void OrderTerm():{/*@bgen(jjtree) OrderTerm */
  ASTOrderTerm jjtn000 = new ASTOrderTerm(JJTORDERTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderTerm */
    try {
/*@egen*/
    Expr() [<ASC> | <DESC>] [<NULL> (<FIRST> |<LAST>)]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
SimpleNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Expression() ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    SelectStmt()|CreT()|DropT()|DelT()|InsT()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/**
* \u93cc\u30e8\ue1d7\u7487\ue15e\u5f5e
*/
void SelectStmt():{/*@bgen(jjtree) SelectStmt */
  ASTSelectStmt jjtn000 = new ASTSelectStmt(JJTSELECTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectStmt */
    try {
/*@egen*/
    <SELECT>[<DISTINCT>|<ALL>]ResultColumn()[(<COMMA>ResultColumn())+]<FROM>FromList()[(<COMMA>FromList())+][<WHERE>Expr()]
    [<GROUP> <BY> Expr() [(<COMMA>Expr())+] [<HAVING> Expr()]] /* Group by having\u701b\u612c\u5f5e */
    [<ORDER> <BY> OrderTerm()[(<COMMA>OrderTerm())+]] /* Order\u701b\u612c\u5f5e */
    [<LIMIT> Expr() [<OFFSET> Expr() | <COMMA> Expr() ]]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ /* Limit\u701b\u612c\u5f5e */
}
void ArithmeticOperator():{/*@bgen(jjtree) ArithmeticOperator */
  ASTArithmeticOperator jjtn000 = new ASTArithmeticOperator(JJTARITHMETICOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperator */
    try {
/*@egen*/
    <DIVIDE>
    | <PLUS>
    | <MINUS>
    | <TIMES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void LogicalOperator():{/*@bgen(jjtree) LogicalOperator */
  ASTLogicalOperator jjtn000 = new ASTLogicalOperator(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalOperator */
    try {
/*@egen*/
    <OR>
    | <AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ComparisonOperator():{/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
    try {
/*@egen*/
    <EQUAL>
    | <LESSTHAN>
    | <LESSTHANOREQUALTO>
    | <GREATERTHAN>
    | <GREATERTHANOREQUALTO>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Operator():{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
    ArithmeticOperator() | LogicalOperator() | ComparisonOperator()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ResultColumn():{/*@bgen(jjtree) ResultColumn */
  ASTResultColumn jjtn000 = new ASTResultColumn(JJTRESULTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ResultColumn */
    try {
/*@egen*/
    <TIMES>
    | LOOKAHEAD(3)TableName()<DOT><TIMES>
    | LOOKAHEAD(2)Expr() [<AS> ColumnAlias() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Expr():{/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    LOOKAHEAD(2)ColumnName() Exprr()
    | LOOKAHEAD(2)LiteralValue() Exprr()
    | LOOKAHEAD(2)TableName()<DOT>ColumnName() Exprr()
    | LOOKAHEAD(2)FunctionName()<LEFTPARENTHESES> [Expr()[(<COMMA>Expr())+]] |[<COMMA>] <RIGHTPARENTHESES> Exprr()
    | LOOKAHEAD(2)<LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES> Exprr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Exprr():{/*@bgen(jjtree) Exprr */
  ASTExprr jjtn000 = new ASTExprr(JJTEXPRR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exprr */
    try {
/*@egen*/
    [Operator() Expr() Exprr()
    | LOOKAHEAD(2)[<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/Exprr()
    | LOOKAHEAD(2)[<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */Exprr()
    | LOOKAHEAD(2)(<NOTNULL> | <ISNULL> | <NOT> <NULL> )Exprr()
    | LOOKAHEAD(2)[<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */Exprr()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Exprrtemp():{}
//{
//    ColumnName()
//    | LiteralValue()
//    | TableName()<DOT>ColumnName()
//    | FunctionName()<LEFTPARENTHESES> [Expr()[(<COMMA>Expr())+]] |[<COMMA>] <RIGHTPARENTHESES>
//    | Expr() Operator() Expr()
//    | <LEFTPARENTHESES> Expr()[(<COMMA>Expr())+]<RIGHTPARENTHESES>
//    | Expr() [<NOT>] <IN> <LEFTPARENTHESES> [SelectStmt() | Expr()[(<COMMA>Expr())+]]<RIGHTPARENTHESES>/* IN\u7487\ue15e\u5f5e*/
//    | Expr() [<NOT>] <BETWEEN> Expr() <AND> Expr() /* between */
//    | Expr() (<NOTNULL> | <ISNULL> | <NOT> <NULL> )
//    | Expr() [<NOT>] <LIKE> Expr() /* LIKE\u7487\ue15e\u5f5e */
//}
void FromList():{/*@bgen(jjtree) FromList */
  ASTFromList jjtn000 = new ASTFromList(JJTFROMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromList */
    try {
/*@egen*/
    TableName() [<AS> TableAlias()]
    /* TODO:\u6769\u70b4\u5e34\u93cc\u30e8\ue1d7\u935c\u5c7d\u7975\u6fc2\u6941\u7161\u7487\ufffd */
    | LOOKAHEAD(2)<LEFTPARENTHESES> SelectStmt() <RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
//void Condition():{}
//{
//    /*[Condition()<AND>Condition()]|*/
//    /*[Tuple()<IN>Query()]*/
//    Expr()
//    | Expr() <IS> <NULL>
//    | Expr() <NOTNULL>
//    | Expr() <ISNULL>
//}
void Tuple():{/*@bgen(jjtree) Tuple */
  ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tuple */
    try {
/*@egen*/
    Attribute()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void CreT():{/*@bgen(jjtree) CreT */
  ASTCreT jjtn000 = new ASTCreT(JJTCRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CreT */
    try {
/*@egen*/
    <CREATE><TABLE>Relation()<LEFTPARENTHESES>ColList()<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ColList():{/*@bgen(jjtree) ColList */
  ASTColList jjtn000 = new ASTColList(JJTCOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColList */
    try {
/*@egen*/
    Attribute()Type()[(<COMMA>Attribute()Type())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Type():{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT>|<DATE>|<CHAR><LEFTPARENTHESES><INTEGER_LITERAL><RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void DropT():{/*@bgen(jjtree) DropT */
  ASTDropT jjtn000 = new ASTDropT(JJTDROPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DropT */
    try {
/*@egen*/
    <DROP><TABLE>Relation()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void DelT():{/*@bgen(jjtree) DelT */
  ASTDelT jjtn000 = new ASTDelT(JJTDELT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DelT */
    try {
/*@egen*/
    <DELETE>DelList()<FROM>FromList()<WHERE>Expr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void DelList():{/*@bgen(jjtree) DelList */
  ASTDelList jjtn000 = new ASTDelList(JJTDELLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DelList */
    try {
/*@egen*/
    Attribute()[(<COMMA>Attribute())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void InsT():{/*@bgen(jjtree) InsT */
  ASTInsT jjtn000 = new ASTInsT(JJTINST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InsT */
    try {
/*@egen*/
    <INSERT><INTO>Relation()<LEFTPARENTHESES>InList()<RIGHTPARENTHESES><VALUES><LEFTPARENTHESES>VList()<RIGHTPARENTHESES>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void InList():{/*@bgen(jjtree) InList */
  ASTInList jjtn000 = new ASTInList(JJTINLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InList */
    try {
/*@egen*/
    Attribute()[(<COMMA>Attribute())+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void VList():{/*@bgen(jjtree) VList */
  ASTVList jjtn000 = new ASTVList(JJTVLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VList */
    try {
/*@egen*/
    <LEFTQUOTATION>IDENTIFIER()<LEFTQUOTATION>[(<COMMA><LEFTQUOTATION>IDENTIFIER()<LEFTQUOTATION>)+]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void Attribute():{/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Relation():{/*@bgen(jjtree) Relation */
  ASTRelation jjtn000 = new ASTRelation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
    try {
/*@egen*/
    IDENTIFIER()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Pattern():{/*@bgen(jjtree) Pattern */
  ASTPattern jjtn000 = new ASTPattern(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
    try {
/*@egen*/
    <LQUOTATION>IDENTIFIER()<LQUOTATION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
/*-------------------*/
void IDENTIFIER():{/*@bgen(jjtree) IDENTIFIER */
  ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}